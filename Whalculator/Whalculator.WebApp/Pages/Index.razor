@page "/"

@using Whalculator.WebApp.Data
@using Whalculator.Core.Calculator.Equation
@inject CalculatorService CalculatorService

<h1>Calculator</h1>

@if (instance is null) {
    <p><em>Loading...</em></p>
} else {
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div id="output">
                    @{
                        LinkedListNode<string>? node = this.output.First;
                    }
                    @for (int i = 0; i < this.output.Count; i++) {
                        <span id="output-@i" class="output-text">@node!.Value</span>
                        node = node.Next;
                    }
                </div>

                <br />

                <EditForm Model="@InputModel" OnValidSubmit="@HandleInput">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <InputText id="input" class="w-100" @bind-Value="InputModel.InputText" />
                </EditForm>
            </div>
        </div>
    </div>
}
<link href="css/index.css" rel="stylesheet" />

@code {

    private LinkedList<string> output = new LinkedList<string>();

    private CalculatorInstance? instance;

    private CalculatorInputModel InputModel { get; } = new CalculatorInputModel();

    protected override async Task OnInitializedAsync() {
        this.instance = await CalculatorService.GetInstanceAsync();
    }

    private async Task HandleInput() {
        if (this.instance is null) {
            return;
        }

        string result;
        string input = InputModel.InputText ?? "";

        this.output.AddLast(input);

        try {
            result = await this.instance.Calculator.ProcessInputAsync(input);
        } catch (Exception) {
            result = "ERROR";
        }

        this.output.AddLast($"=> {result}");
        InputModel.InputText = "";
    }

}
