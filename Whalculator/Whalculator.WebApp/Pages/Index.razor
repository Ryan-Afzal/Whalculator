@page "/"

@using Whalculator.WebApp.Data
@inject CalculatorService CalculatorService

<h1>Calculator</h1>

@if (instance is null) {
    <p><em>Loading...</em></p>
} else {
    <div class="container">
        <div class="row">
            <div class="col-3">
                <div class="scrolls">
                    <ul class="list-group">
                        @foreach (var item in this.instance.Calculator.Variables.GetAllVariables()) {
                            <li class="list-group-item">
                                <span class="output-text">@item.Item1 = @item.Item2.GetEquationString()</span>
                            </li>
                        }
                    </ul>

                    <hr />

                    <ul class="list-group">
                        @foreach (var item in this.instance.Calculator.Functions.GetAllFunctions()) {
                            <li class="list-group-item">
                                <span class="output-text">@item.Name = @item.Function.GetEquationString()</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="col-8">
                <div id="output">
                    @{
                        LinkedListNode<string>? node = this.output.First;
                    }
                    @for (int i = 0; i < this.output.Count; i++) {
                        <span id="output-@i" class="output-text">@node!.Value</span>
                        node = node.Next;
                    }
                </div>

                <br />

                <EditForm Model="@InputModel" OnValidSubmit="@HandleInput">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <input type="text" id="input" class="w-100" autocomplete="off" @bind-value="InputModel.InputText" />
                </EditForm>
            </div>
            <div class="col-2">

            </div>
        </div>
    </div>
}
<link href="css/index.css" rel="stylesheet" />

@code {

    private LinkedList<string> output = new LinkedList<string>();

    private CalculatorInstance? instance;

    private CalculatorInputModel InputModel { get; } = new CalculatorInputModel();

    protected override async Task OnInitializedAsync() {
        this.instance = await CalculatorService.GetInstanceAsync();
    }

    private async Task HandleInput() {
        if (this.instance is null) {
            return;
        }
        string input = InputModel.InputText ?? "";

        this.output.AddLast(input);

        try {
            string output = await this.instance.Calculator.ProcessInputAsync(input);
            foreach (var x in output.Split("\n")) {
                this.output.AddLast($"=> {x}");
            }
        } catch (Exception) {
            this.output.AddLast($"=> ERROR");
        }
        InputModel.InputText = "";
    }

}
